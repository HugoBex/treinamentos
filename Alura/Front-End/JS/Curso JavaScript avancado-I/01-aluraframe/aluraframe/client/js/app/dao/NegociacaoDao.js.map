{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","delete","clear","cursor","openCursor","negociacoes","cursorAtual","result","resultSet","value","push","_data","_quantidade","_valor","continue"],"mappings":"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","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from '../models/Negociacao';\n\nexport class NegociacaoDao {\n\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], \"readwrite\")\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            };\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error);\n            };\n        });\n    }\n\n    remover(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], \"readwrite\")\n                .objectStore(this._store)\n                .delete(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            };\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error);\n            };\n        });\n    }\n\n    apagaTodos(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], \"readwrite\")\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve();\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error);\n            };\n        });\n    }\n\n\n    listarTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = e => {\n                let cursorAtual = e.target.result;\n                if (cursorAtual) {\n                    let resultSet = cursorAtual.value;\n                    negociacoes.push(\n                        new Negociacao(resultSet._data, resultSet._quantidade, resultSet._valor));\n\n                    cursorAtual.continue();\n                } else {\n                    resolve(negociacoes);\n                }\n            };\n\n            cursor.onerror = e => {\n                console.log(e.target.error);\n                reject(\"Não foi possível listar as negociações.\");\n            };\n        });\n    }\n}"]}