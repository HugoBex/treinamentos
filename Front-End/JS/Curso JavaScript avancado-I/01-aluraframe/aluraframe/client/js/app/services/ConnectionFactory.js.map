{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","READ_WRITE_MODE","READ_ONLY_MODE","VERSION_CHANGE_MODE","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","console","log","onsuccess","bind","onerror","error","name","dbConnection","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACTC,2B,GAAkB,W;AAClBC,0B,GAAiB,U;AACjBC,+B,GAAsB,e;AAExBC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBd,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAY,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACAC,wCAAQC,GAAR,CAAY,sCAAZ;AACH,6BAHD;;AAKAV,wCAAYW,SAAZ,GAAwB,aAAK;;AAEzBF,wCAAQC,GAAR,CAAY,+BAAZ;;AAEA,oCAAI,CAACjB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,uGAAV,CAAN;AACH,qCAFD;;AAIAH,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AAEH;AACDV,wCAAQL,UAAR;AACH,6BAfD;;AAiBAO,wCAAYa,OAAZ,GAAsB,aAAK;AACvBJ,wCAAQC,GAAR,CAAY,mDAAZ;AACAX,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBA9BM,CAAP;AA+BH;;;kDAEoBC,Y,EAAc;AAC/B7B,+BAAO8B,OAAP,CAAe,iBAAS;AACpB,gCAAID,aAAaE,gBAAb,CAA8BC,QAA9B,CAAuCC,KAAvC,CAAJ,EACIJ,aAAaK,iBAAb,CAA+BD,KAA/B;;AAEJJ,yCAAaM,iBAAb,CAA+BF,KAA/B,EAAsC,EAAEG,eAAe,IAAjB,EAAtC;AACH,yBALD;AAMH;;;sDAEwB;AACrB,4BAAI9B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 1;\nconst dbName = 'aluraframe';\nconst READ_WRITE_MODE = \"readwrite\";\nconst READ_ONLY_MODE = \"readonly\";\nconst VERSION_CHANGE_MODE = \"versionchange\";\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível instanciar a classse ConnectionFactory');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n                console.log('Local storage atualizado com sucesso');\n            };\n\n            openRequest.onsuccess = e => {\n\n                console.log('Conexão realizada com sucesso');\n\n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new Error(\"A funcão close somente deve ser chamada através da classe ConnectionFactory (ConnectionFactory.close)\");\n                    };\n\n                    connection = e.target.result;\n\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log('Erro ao tentar realizar conexao com API IndexedDB');\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(dbConnection) {\n        stores.forEach(store => {\n            if (dbConnection.objectStoreNames.contains(store))\n                dbConnection.deleteObjectStore(store);\n\n            dbConnection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection() {\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n}"]}